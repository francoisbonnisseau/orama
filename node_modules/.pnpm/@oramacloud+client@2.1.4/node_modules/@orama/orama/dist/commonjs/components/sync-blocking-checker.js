"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.trackInsertion = trackInsertion;
exports.trackRemoval = trackRemoval;
const types_js_1 = require("../types.js");
// Web platforms don't have process. React-Native doesn't have process.emitWarning.
const warn = globalThis.process?.emitWarning ??
    function emitWarning(message, options) {
        console.warn(`[WARNING] [${options.code}] ${message}`);
    };
function trackInsertion(orama) {
    if (typeof orama[types_js_1.kInsertions] !== 'number') {
        queueMicrotask(() => {
            orama[types_js_1.kInsertions] = undefined;
        });
        orama[types_js_1.kInsertions] = 0;
    }
    if (orama[types_js_1.kInsertions] > 1000) {
        warn("Orama's insert operation is synchronous. Please avoid inserting a large number of document in a single operation in order not to block the main thread or, in alternative, please use insertMultiple.", { code: 'ORAMA0001' });
        orama[types_js_1.kInsertions] = -1;
    }
    else if (orama[types_js_1.kInsertions] >= 0) {
        orama[types_js_1.kInsertions]++;
    }
}
function trackRemoval(orama) {
    if (typeof orama[types_js_1.kRemovals] !== 'number') {
        queueMicrotask(() => {
            orama[types_js_1.kRemovals] = undefined;
        });
        orama[types_js_1.kRemovals] = 0;
    }
    if (orama[types_js_1.kRemovals] > 1000) {
        warn("Orama's remove operation is synchronous. Please avoid removing a large number of document in a single operation in order not to block the main thread, in alternative, please use updateMultiple.", { code: 'ORAMA0002' });
        orama[types_js_1.kRemovals] = -1;
    }
    else if (orama[types_js_1.kRemovals] >= 0) {
        orama[types_js_1.kRemovals]++;
    }
}
//# sourceMappingURL=sync-blocking-checker.js.map