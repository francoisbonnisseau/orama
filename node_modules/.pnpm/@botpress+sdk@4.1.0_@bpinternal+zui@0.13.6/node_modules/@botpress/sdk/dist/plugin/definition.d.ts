import { StateDefinition, RecurringEventDefinition, EventDefinition, ConfigurationDefinition, UserDefinition, ConversationDefinition, MessageDefinition, ActionDefinition, TableDefinition, WorkflowDefinition } from '../bot/definition';
import { IntegrationPackage, InterfacePackage } from '../package';
import { ZuiObjectSchema } from '../zui';
export { StateDefinition, RecurringEventDefinition, EventDefinition, ConfigurationDefinition, UserDefinition, ConversationDefinition, MessageDefinition, ActionDefinition, TableDefinition, IntegrationConfigInstance, WorkflowDefinition, } from '../bot/definition';
type BaseConfig = ZuiObjectSchema;
type BaseStates = Record<string, ZuiObjectSchema>;
type BaseEvents = Record<string, ZuiObjectSchema>;
type BaseActions = Record<string, ZuiObjectSchema>;
type BaseInterfaces = Record<string, any>;
type BaseIntegrations = Record<string, any>;
type BaseTables = Record<string, ZuiObjectSchema>;
type BaseWorkflows = Record<string, ZuiObjectSchema>;
export type PluginDefinitionProps<TName extends string = string, TVersion extends string = string, TConfig extends BaseConfig = BaseConfig, TStates extends BaseStates = BaseStates, TEvents extends BaseEvents = BaseEvents, TActions extends BaseActions = BaseActions, TInterfaces extends BaseInterfaces = BaseInterfaces, TIntegrations extends BaseIntegrations = BaseIntegrations, TTables extends BaseTables = BaseTables, TWorkflows extends BaseWorkflows = BaseWorkflows> = {
    name: TName;
    version: TVersion;
    title?: string;
    description?: string;
    icon?: string;
    readme?: string;
    integrations?: {
        [K in keyof TIntegrations]: IntegrationPackage;
    };
    interfaces?: {
        [K in keyof TInterfaces]: InterfacePackage;
    };
    user?: UserDefinition;
    conversation?: ConversationDefinition;
    message?: MessageDefinition;
    states?: {
        [K in keyof TStates]: StateDefinition<TStates[K]>;
    };
    configuration?: ConfigurationDefinition<TConfig>;
    events?: {
        [K in keyof TEvents]: EventDefinition<TEvents[K]>;
    };
    recurringEvents?: Record<string, RecurringEventDefinition<TEvents>>;
    actions?: {
        [K in keyof TActions]: ActionDefinition<TActions[K]>;
    };
    tables?: {
        [K in keyof TTables]: TableDefinition<TTables[K]>;
    };
    /**
     * # EXPERIMENTAL
     * This API is experimental and may change in the future.
     */
    workflows?: {
        [K in keyof TWorkflows]: WorkflowDefinition<TWorkflows[K]>;
    };
};
export declare class PluginDefinition<TName extends string = string, TVersion extends string = string, TConfig extends BaseConfig = BaseConfig, TStates extends BaseStates = BaseStates, TEvents extends BaseEvents = BaseEvents, TActions extends BaseActions = BaseActions, TInterfaces extends BaseInterfaces = BaseInterfaces, TIntegrations extends BaseIntegrations = BaseIntegrations, TTables extends BaseTables = BaseTables, TWorkflows extends BaseWorkflows = BaseWorkflows> {
    readonly props: PluginDefinitionProps<TName, TVersion, TConfig, TStates, TEvents, TActions, TInterfaces, TIntegrations, TTables, TWorkflows>;
    readonly name: this['props']['name'];
    readonly version: this['props']['version'];
    readonly title: this['props']['title'];
    readonly description: this['props']['description'];
    readonly icon: this['props']['icon'];
    readonly readme: this['props']['readme'];
    readonly integrations: this['props']['integrations'];
    readonly interfaces: this['props']['interfaces'];
    readonly user: this['props']['user'];
    readonly conversation: this['props']['conversation'];
    readonly message: this['props']['message'];
    readonly states: this['props']['states'];
    readonly configuration: this['props']['configuration'];
    readonly events: this['props']['events'];
    readonly recurringEvents: this['props']['recurringEvents'];
    readonly actions: this['props']['actions'];
    readonly tables: this['props']['tables'];
    readonly workflows: this['props']['workflows'];
    constructor(props: PluginDefinitionProps<TName, TVersion, TConfig, TStates, TEvents, TActions, TInterfaces, TIntegrations, TTables, TWorkflows>);
}
